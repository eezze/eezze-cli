require("shelljs/global");const path=require("path"),fs=require("fs"),{test:test,pwd:pwd}=require("shelljs"),Logger=require("./classes/Logger"),projectConfPath=`${__dirname}/../../config.json`;module.exports=async function(o={}){if(this.logger=new Logger,void 0!==o.doLogging?global.DO_TOOL_LOGGING="true"==o.doLogging||1==o.doLogging||1==o.doLogging:global.DO_TOOL_LOGGING=!1,!test("-f",projectConfPath)){fs.readFileSync(__dirname+"/tpls/project.conf.tpl").toString().to(projectConfPath)}this.appRoot=path.dirname(require.main.filename),o.cmdRoot?(/^\.\//.test(o.cmdRoot)&&(o.cmdRoot=o.cmdRoot.replace(/^\.\//,`${this.appRoot}/`)),this.cmdRoot=`${this.appRoot.replace(/\/$/,"")}/${o.cmdRoot}`):(this.cmdRoot=`${this.appRoot}/cmds`,fs.existsSync(this.cmdRoot)||DO_TOOL_LOGGING&&this.logger.critical(`Default path doesn't exist. Please provide a "cmdRoot" option in the init function or create the folder: ${this.cmdRoot}`)),void 0!==o.ignoreRoutes&&Array.isArray(o.ignoreRoutes)?this.ignoreRoutes=o.ignoreRoutes:this.ignoreRoutes=[],await require("./run")(this.cmdRoot,this.ignoreRoutes,projectConfPath,this.logger,o.cmdRoot||"cmds")};